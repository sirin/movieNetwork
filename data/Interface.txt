ing. arabirim. nesne yonelimli programlama'da bir interface basitce method ve property listesidir. "bu interface'i destekleyen class olacak olursa su method'lari ve property'leri desteklemek zorundadir arkadasim" seklinde dayatmalara izin verir. bu sayede fonksiyonlara sadece class'in ilgili interface'lerini paslamak mumkun olur. e zaten polymorphism ile bunu yapabiliyorduk, yani cagirdigimiz class'in hangisi oldugunu bilmeden is yaptirabiliyoduk neden boyle biseye gerek vardi diye sordugunuzu duyar gibi oluyorum. interface, class hiyerarsisinden bagimsiz polymorphism'e izin verir. yani bir interface'i bir fonksiyona pasladiginizda o interface'e sahip class'in belli bir class'tan turetilmis olmasi gerekmez. istedigi yerden turemis olsun fonksiyon sadece interface'le muhatap olur.
arayuz
biz kucukken joystickleri sinclair 48k'ya baglamaya yarayan ara parcaya denirdi. zaman ne cabuk gecmis, kelimeye ne anlamlar yuklenmis.
arabirim
dynamic dispatch edilen , gövdesi hiçbir şekilde verilmemiş metotlardan oluşan class'tır.
interface'in guzel yani, bir method icin argument belirlerken bu argument'in belirli bir interface'e uymasini isteyebilmektir.. boylece overloading kasmadan, belirli bir interface'e uyan n sayida class arguman olarak kabul edilebilir.
c++'daki pure abstract base class'ın (declare ettigi hic bir seyi implement etmeyen class) com'daki ismi.
iki birim arasındaki etkileşimi sağlayan ve bu yüzden iki tarafa da anlayabileceği dille konuşması gereken bir hededir. örneğin windows çıktıktan sonra o tıkladığımız her şey (bkz: gui) birer makine koduna dönüştürülür (tabi başka interfaceler de var arada) ve işlemcinin kulağına fısıldanır. halbuki ne biz makine kodlarını görürüz, ne de işlemci tıkladığımız şeyin bizim için ne ifade ettiğini bilir. zaten interfacein olayı da budur: herkese kendi dilinden konuşmak. interface yalnızca bilgisayar alanında değil hayata yayılmış bir kavramdır. örneğin direksiyon, vites ve pedallar arabanın interfaceidir ya da kavramsal olarak, herhangi bir şirketin halkla ilişkiler birimi de halk ve şirket arasında bir tür interfacetir, arayüzdür. matrix revolutionsın sonunda robotlar the architectin yüzünü oluşturular, neo'da o yüzle konuşur. bu da bi intefacedir örneğin.
(bkz: cpu interface)
neal stephenson ve frederick george'un ortak yazdigi komplo teorisi ve amerikan secimleri konulu ilginc roman.
csharp'da get/set interface tanimi $oyle gercekle$ir; interface insan { string isim { get; set; } }
kompozit yapilarin hayali elemani olan arayuze verilen ad. cevremizde gordugumuz hemen hemen her sey kompozit yapida olunca, arayuzu olmayan bir eleman bulmak da oldukca zor. dogada tek, iki ve uc boyutlu arayuzler gormemiz mumkun. yuk transferi vb. bu ara yuzde yapilir. yapilar kuculdukce, ornegin son zamanlarda nano yapilara olan ilgi arttikca, arayuzun onemi git gide daha da artmaya basladi. hatta soyle de soylenebilir; nano yapilari nano yapan, bu arayuz oldu.
java, c# gibi multiple inheritance'ı desteklemeyen dillerin bu konuya bulduğu çözüm..
uzun zamandır kendisini göremediğimiz altinci nesil javacı yazar. (bkz: neredesin firuze)
bunyesindeki metodlar dynamic dispatch edildiginden runtime'da metodu cagirdiginiz referansa(interface'i implement etmis siniflarin referanslari) gore arama yapilacaktir, e bu da zaman kaybidir. yuksek performans istenen yazilimlarda bol miktarda kullanilmamasi tavsiye edilir.
performans konusuyla interface destekleyen herhangibir dille yazilan programlar arasinda dogrudan bir iliski bulunmamaktadir. akademya kokusu aliyorum, kitap kokan beyanatlar bunlar. bunlari kimler ogretiyor bilemiyorum ama performans sorunuyla karsilasmayan ve dolayisiyla problemi pek bilmeyen kisiler genelde arastirma odakli (urun odakliya ters olarak) akademik programcilar oldugundan bu tur "yuksek performans istiyorsan interface kullanma evladim" tavsiyelerinin onlardan ciktigini dusunmemek cok zor gercekten. adami telefonla arayip "performans demissin dostum ama bu kod core dump" diye sovmemisler ki hayatinda. neyse, cok kisa olarak konusmak gerekirse, evet, tabii ki de vmt'den lookup maliyeti vardir interface metotlarinin. ama o kadar. performansi yamultur turu beyanatlar inanilmaz genellemeci, cok buyuk laflar. gercek su ki, kod yazmadan performans hakkinda konusamazsiniz! once kod yazilir, yazilirken de eger specte acik acik yoksa (genelde yoktur, implicit bir beklentidir performans, ama ornegin gomulu sistemlerde specte olur bu, sebebi ya elinizdeki donanimin ozelliklerini (ram, nvram gibi) degistirmenin maliyet sebepleriyle tercih edilmemesi ya da ornegin uygulamanizin calisacagi gercek dunyanin kisitlari (iste su sivi su kadar saniye.mikrosaniyede cozulur o zamana kadar sunu sunu islemeyi bitirmen gerekir gibi) falandir) interface'in getirileri yaninda programin calisma hizina etkisi sizi kodu yazarken baglamaz. kod yazildiktan sonra performans olcumleri, stres testleri falan yaparsiniz, hantal bolgeleri optimize etmeye girisirsiniz. burada bile ilk tepkiniz asla "interface kullanmisiz ahaha yazik bize, hocamiz boyle gorse ff cakardi" olmaz. tabii kodu sadece tasarim icin yazin, performansi sallayin demiyorum. tasarim icin optimize kod, performansi batirir demenin yanlis olduguna inanirim bunu da soyliyim yine arada. ama kolayiniza geliyor diye binary search yerine brute force kullanirsaniz gorusmeyelim zaten (gorusmeyiz de merak etmeyin*). ama interface guclu bir aractir, cok zeki insanlar tarafindan nerden baksan 2 nesildir ustunde calisilan ve sektorle dogrudan etkilesim icinde oldugundan gelisme imkani bulabilmis programlama dilleri gibi bir alanda ulasilan kristalize cozumlerden birisidir. hayatta da kimsenin size tersini soylemesine bu kadar kolay boyun egmeyin.
genelde ilk defa ogrenildiginde kafa kari$tiran, "ee ne i$e yariyor ki bu ? " dedirten bir kavram olmasindan oturu multiple inheritance 'in eksikligini gidermek icin var oldugu soylenir. interface, aslinda multiple inheritance 'in eksikligini gidermek uzere yaratilan bir konsept degildir. bunu iceren dillerde, sonradan du$unulup eklenmi$ bir $ey de degildir. object oriented konseptinde is-a relationship biciminin icerisinde yer alir. anlamakta gucluk cekilen bir nokta da, abstract class lardan farkidir. bu farkliliklari iki $ekilde gruplayabiliriz. birincisi, teknik farkliliklar. ikincisi ise teorik olarak farkliliklar goze carpar. teknik olarak, bir interface hic bir $ekilde implementation iceremez, ancak abstract classlar istege bagli olarak ornegin abstract olmayan methodlarda, implementation icerebilirler. teorik olarak, interface ile abstract classlarin farkini bir ornekle aciklayabiliriz. ornegin, moveable diye bir interface'iniz olsun, person diye de bir abstract classiniz. moveable 'in kitlesi student 'a gore cok daha geni$ olacaktir elbette, cunku arabalar, hayvanlar, insanlar, pek cok $ey hareket edebilir. ancak student dediginiz zaman akliniza gelen ogrenim gormekte olan bir insandir. burada, student bir moveabledir, yani is-a relationship icerisinde, "student is moveable" denilebilir. ancak, bu student'in moveable dan turemi$ oldugu anlamina gelemez. daha sonra, person diye bir abstract class oldugunu du$unelim. person, moveable a gore daha spesifiktir ve student bir persondur, is-a relationship yine kurulur ancak, bu sefer, student person dan turemi$ olabilir. yani interfacelerle, bir nevi tanimi miras almi$ oluyorsunuz ki, interface icin cogu zaman kullanilan, definition inheritance dedikleri olaydir. ve ayrica, (bkz: object oriented programming) (bkz: abstract class) (bkz: multiple inheritance) (bkz: copy paste degil alin teri)
alm. schnitstelle.
kendi gerçek dünyanız ile sanal dünya arasında teknik etkileşime destek olan, artificial life techizatı.
(bkz: i melih gökçek)
(bkz: implements)
kol saati kazandığına inanmayan yazar. oysa ki sözlük yazarları olarak hepimiz o numarayı aradık. hepimizin kolunda aynı saatten var. süper ama bazen su kaçırıyor içine, pili de çabuk bitiyor.. valla! 0531 911 20 37/#20590100 0534 431 89 95/#20590133 0532 111 97 97/#20590110
turler arası anlaşma sağlayan yapılardır. (bkz: implement)
aynı zamanda yönetmenliğini andy anderson'ın üstlendiği 1985 tarihli bilimkurgu.
bir de içinde bulunduğumuz yıl gösterime girmesi beklenen film.
